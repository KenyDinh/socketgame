/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game.client.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author tkv-nhukhanhdinh
 */
public class BombPreview extends javax.swing.JFrame {

    private boolean isPreview;
    private int xlen;
    private int ylen;
    private int sqlen;
    private static final int X = 10;
    private static final int Y = 10;
    private static final int SIZE = 20;

    /**
     * Creates new form BombPreview
     */
    public BombPreview(int xlen, int ylen, int sqlen) {
        initComponents();
        setTitle("Preview bomb explode!");
        this.xlen = xlen;
        this.ylen = ylen;
        this.sqlen = sqlen;
        setAlwaysOnTop(true);
        createPreview();
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/game/client/iconImage/bp.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(102, 102, 102));
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mainPanelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            closePreview();
        }
    }//GEN-LAST:event_formKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closePreview();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Graphics g = mainPanel.getGraphics();
        initGid(g, SIZE);
    }//GEN-LAST:event_formWindowActivated

    private void mainPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseEntered
        Graphics g = mainPanel.getGraphics();
        initGid(g, SIZE);
    }//GEN-LAST:event_mainPanelMouseEntered

    public void closePreview() {
        isPreview = false;
        this.dispose();
    }

    private void createPreview() {
        if (xlen > X) {
            xlen = X;
        }
        if (ylen > Y) {
            ylen = Y;
        }
        if (sqlen > X) {
            sqlen = X;
        }
        isPreview = true;
        Graphics g = mainPanel.getGraphics();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(100);
                    initGid(g, SIZE);
                } catch (InterruptedException ex) {
                }
            }
        }).start();
        new Thread(new Runnable() {
            @Override
            public void run() {
                int index = 0;
                while (isPreview) {
                    try {
                        Thread.sleep(400);
                        if (index != 0) {
                            Image img = ClientFrame.getClientFrame().getListImageBoom().get("fire_" + index);
                            g.drawImage(img, SIZE * X, Y * SIZE, SIZE, SIZE, null);
                            for (int i = 1; i <= xlen; i++) {
                                g.drawImage(img, SIZE * (X + i), Y * SIZE, SIZE, SIZE, null);
                            }
                            for (int i = 1; i <= xlen; i++) {
                                g.drawImage(img, SIZE * (X - i), Y * SIZE, SIZE, SIZE, null);
                            }
                            for (int j = 1; j <= ylen; j++) {
                                g.drawImage(img, SIZE * X, (Y + j) * SIZE, SIZE, SIZE, null);
                            }
                            for (int j = 1; j <= ylen; j++) {
                                g.drawImage(img, SIZE * X, (Y - j) * SIZE, SIZE, SIZE, null);
                            }
                            for (int i = 1; i <= sqlen; i++) {
                                for (int j = 1; j <= sqlen; j++) {
                                    g.drawImage(img, SIZE * (X + i), (Y + j) * SIZE, SIZE, SIZE, null);
                                    g.drawImage(img, SIZE * (X + i), (Y - j) * SIZE, SIZE, SIZE, null);
                                    g.drawImage(img, SIZE * (X - i), (Y + j) * SIZE, SIZE, SIZE, null);
                                    g.drawImage(img, SIZE * (X - i), (Y - j) * SIZE, SIZE, SIZE, null);
                                }
                            }
                        } else {
                            reFillCell(g, X, Y, SIZE, false, true);
                            reDrawCell(g, X, Y, SIZE);
                            for (int i = 1; i <= xlen; i++) {
                                reFillCell(g, X + i, Y, SIZE);
                                reDrawCell(g, X + i, Y, SIZE);
                            }
                            for (int i = 1; i <= xlen; i++) {
                                reFillCell(g, X - i, Y, SIZE);
                                reDrawCell(g, X - i, Y, SIZE);
                            }
                            for (int j = 1; j <= ylen; j++) {
                                reFillCell(g, X, Y + j, SIZE);
                                reDrawCell(g, X, Y + j, SIZE);
                            }
                            for (int j = 1; j <= ylen; j++) {
                                reFillCell(g, X, Y - j, SIZE);
                                reDrawCell(g, X, Y - j, SIZE);
                            }
                            for (int i = 1; i <= sqlen; i++) {
                                for (int j = 1; j <= sqlen; j++) {
                                    reFillCell(g, X + i, Y + j, SIZE, true, false);
                                    reDrawCell(g, X + i, Y + j, SIZE);

                                    reFillCell(g, X + i, Y - j, SIZE, true, false);
                                    reDrawCell(g, X + i, Y - j, SIZE);

                                    reFillCell(g, X - i, Y + j, SIZE, true, false);
                                    reDrawCell(g, X - i, Y + j, SIZE);

                                    reFillCell(g, X - i, Y - j, SIZE, true, false);
                                    reDrawCell(g, X - i, Y - j, SIZE);
                                }
                            }
                        }
                        ++index;
                        if (index > 2) {
                            index = 0;
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(BombPreview.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }).start();
    }

    private void initGid(Graphics g, int size) {
        for (int i = 0; i <= 20; i++) {
            for (int j = 0; j <= 20; j++) {
                reDrawCell(g, i, j, size);
            }
        }
    }

    private void reDrawCell(Graphics g, int x, int y, int size) {
        g.setColor(Color.BLACK);
        g.drawRect(x * size, y * size, size, size);
    }

    private void reFillCell(Graphics g, int x, int y, int size) {
        reFillCell(g, x, y, size, false, false);
    }

    private void reFillCell(Graphics g, int x, int y, int size, boolean cross, boolean center) {
        if (center) {
            g.setColor(new Color(152, 203, 119));
        } else if (cross) {
            g.setColor(new Color(199, 203, 119));
        } else {
            g.setColor(new Color(102, 102, 102));
        }
        g.fillRect(x * size, y * size, size, size);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
