/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game.client.gui;

import game.client.common.CommonDefine;
import game.client.common.CommonMethod;
import game.client.socket.BoomGameClient;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author tkv-nhukhanhdinh
 */
public class MapDesign extends javax.swing.JFrame {

    private static final int SIZE = 40;
    private static final int MAP_SIZE = 800;
    private static final Color BACKGROUND = new Color(130, 130, 130);
    //---------------------------------//
    private static final int WALL = 6;
    private static final int WAY = 7;
    private static final int BOX = 8;

    private static final int OTHER = 9;
    public static final int OTHER_COUNT = 18;

    // boom 40 -> 50
    public static final int BOOM_1 = 40;
    public static final int BOOM_2 = 41;
    public static final int BOOM_3 = 42;
    public static final int BOOM_4 = 43;
    public static final int BOOM_5 = 44;

    public static final int BOOM_6 = 45;
    public static final int BOOM_7 = 46;
    public static final int BOOM_8 = 47;
    public static final int BOOM_9 = 48;
    public static final int BOOM_10 = 49;

    public static final int BOOM_11 = 50;
    public static final int BOOM_12 = 51;
    public static final int BOOM_13 = 52;
    public static final int BOOM_14 = 53;
    public static final int BOOM_15 = 54;

    public static final int BOOM_16 = 55;
    public static final int BOOM_17 = 56;
    public static final int BOOM_18 = 57;
    public static final int BOOM_19 = 58;
    public static final int BOOM_20 = 59;
    public static final int BOOM_21 = 60;
    public static final int BOOM_22 = 61;
    public static final int BOOM_23 = 62;
    public static final int BOOM_24 = 63;
    public static final int BOOM_25 = 64;
    public static final int BOOM_26 = 65;
    public static final int BOOM_27 = 66;
    public static final int BOOM_28 = 67;
    public static final int BOOM_29 = 68;

    // only item greater than or equal 69
    public static final int ITEM_RECOVERY_1 = 69;//recover 1/10
    public static final int ITEM_SUPER_KICK = 70;//kb
    public static final int ITEM_SUPER_EAT = 71;//eb
    public static final int ITEM_NINJA = 72;//nj
    public static final int ITEM_PROTECTED = 73;//pr
    public static final int ITEM_6 = 74;//bomb
    public static final int ITEM_7 = 75;//bomb
    public static final int ITEM_8 = 76;//bomb
    public static final int ITEM_9 = 77;//bomb
    public static final int ITEM_10 = 78;//bomb
    public static final int ITEM_11 = 79;//bomb
    public static final int ITEM_12 = 80;//bomb
    public static final int ITEM_13 = 81;//bomb
    public static final int ITEM_14 = 82;//bomb
    public static final int ITEM_15 = 83;//bomb
    public static final int ITEM_16 = 84;//bomb
    public static final int ITEM_17 = 85;//bomb
    public static final int ITEM_18 = 86;//bomb
    public static final int ITEM_19 = 87;//bomb
    public static final int ITEM_RECOVERY_2 = 88;//recover 1/5
    public static final int ITEM_RECOVERY_3 = 89;//recover 1/4
    public static final int ITEM_MONEY_BAG = 90;//coin
    public static final int ITEM_BAG_PLUS = 91;
    public static final int ITEM_BIG_BAG_PLUS = 92;
    public static final int ITEM_BOMB_DIRECTION = 93;
    //---------------------------------//

    //---------------------------------//
    private Graphics g;
    private Graphics gImg;
    private int unitId;
    private int[][] map;
    private Map<String, Image> mapImg = new HashMap<>();

    /**
     * Creates new form MapCreated
     *
     * @param mapImg
     */
    public MapDesign(Map<String, Image> mapImg) {
        initComponents();
        CommonMethod.setLocationFrame(this);
        g = main_panel.getGraphics();
        gImg = pn_Img.getGraphics();
        this.mapImg = mapImg;
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/game/client/iconImage/design.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        lb_title = new javax.swing.JLabel();
        cbbUnit = new javax.swing.JComboBox<>();
        pn_Img = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        cbbListGame = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();
        main_panel = new javax.swing.JPanel(){
            public void paint(Graphics g){
                drawMainGame(g);
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Design");

        lb_title.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_title.setForeground(new java.awt.Color(0, 51, 255));
        lb_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_title.setText("Design Map");

        cbbUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Unit", "WAY", "WALL", "TREE", "OTHER", "ITEM_RECOVERY_SMALL", "ITEM_SUPER_TOSS", "ITEM_CRAZY_MAN", "ITEM_NINJA", "ITEM_SHIELD", "ITEM_BOMB_1", "ITEM_BOMB_2", "ITEM_BOMB_3", "ITEM_BOMB_4", "ITEM_BOMB_5", "ITEM_BOMB_6", "ITEM_BOMB_7", "ITEM_BOMB_8", "ITEM_BOMB_9", "ITEM_BOMB_10", "ITEM_BOMB_11", "ITEM_BOMB_12", "ITEM_BOMB_13", "ITEM_BOMB_14", "ITEM_RECOVERY_MEDIUM", "ITEM_RECOVERY_HUGE", "ITEM_MONEY_BAG", "ITEM_BAG_PLUS", "ITEM_BIG_BAG_PLUS", "ITEM_SWAP_DIRECTION" }));
        cbbUnit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbUnitItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pn_ImgLayout = new javax.swing.GroupLayout(pn_Img);
        pn_Img.setLayout(pn_ImgLayout);
        pn_ImgLayout.setHorizontalGroup(
            pn_ImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        pn_ImgLayout.setVerticalGroup(
            pn_ImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        cbbListGame.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Game", "Boom" }));
        cbbListGame.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbListGameItemStateChanged(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbbListGame, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 319, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pn_Img, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        topPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnReset, btnSave, cbbListGame, cbbUnit});

        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addComponent(lb_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pn_Img, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave)
                            .addComponent(cbbListGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset))
                        .addContainerGap())))
        );

        topPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnReset, btnSave});

        main_panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                main_panelMouseDragged(evt);
            }
        });
        main_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                main_panelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout main_panelLayout = new javax.swing.GroupLayout(main_panel);
        main_panel.setLayout(main_panelLayout);
        main_panelLayout.setHorizontalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        main_panelLayout.setVerticalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(topPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(main_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void main_panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_main_panelMouseDragged
        int y = (int) ((evt.getX() - 1) / SIZE);
        int x = (int) ((evt.getY() - 1) / SIZE);
        if (x < 0 || x > 19 || y < 0 || y > 19) {
            return;
        }
        if (cbbListGame.getSelectedIndex() != 1 || unitId == 0) {
            return;
        }
        if (SwingUtilities.isLeftMouseButton(evt)) {
            if (map[x][y] == unitId) {
                return;
            }
            map[x][y] = unitId;
            drawUnit(g, x, y, unitId);
        } else if (SwingUtilities.isRightMouseButton(evt)) {
            if (map[x][y] == WAY) {
                return;
            }
            map[x][y] = WAY;
            drawUnit(g, x, y, WAY);
        }
    }//GEN-LAST:event_main_panelMouseDragged

    private void main_panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_main_panelMouseClicked
        int y = (int) ((evt.getX() - 1) / SIZE);
        int x = (int) ((evt.getY() - 1) / SIZE);
        if (x < 0 || x > 19 || y < 0 || y > 19) {
            return;
        }
        if (cbbListGame.getSelectedIndex() != 1 || unitId == 0) {
            return;
        }
        if (SwingUtilities.isLeftMouseButton(evt)) {
            if (map[x][y] == unitId) {
                return;
            }
            map[x][y] = unitId;
            drawUnit(g, x, y, unitId);
        } else if (SwingUtilities.isRightMouseButton(evt)) {
            if (map[x][y] == WAY) {
                return;
            }
            map[x][y] = WAY;
            drawUnit(g, x, y, WAY);
        }
    }//GEN-LAST:event_main_panelMouseClicked

    private void cbbListGameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbListGameItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (evt.getItem().toString().equals("Boom")) {
                map = new int[20][20];
                for (int i = 0; i < 20; i++) {
                    for (int j = 0; j < 20; j++) {
                        if (i == 0 || j == 0 || i == 19 || j == 19) {
                            map[i][j] = WALL;
                        } else {
                            map[i][j] = WAY;
                        }
                    }
                }
            } else {
                map = null;
            }
            drawMainGame();
        }
    }//GEN-LAST:event_cbbListGameItemStateChanged

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        int choice = cbbListGame.getSelectedIndex();
        switch (choice) {
            case 1:
                map = new int[20][20];
                for (int i = 0; i < 20; i++) {
                    for (int j = 0; j < 20; j++) {
                        if (i == 0 || j == 0 || i == 19 || j == 19) {
                            map[i][j] = WALL;
                        } else {
                            map[i][j] = WAY;
                        }
                    }
                }
                drawMainGame();
                break;
            default:
                map = null;
                drawMainGame();
                break;

        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void cbbUnitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbUnitItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            int choice = cbbUnit.getSelectedIndex();
            if (choice != 0) {
                if (cbbListGame.getSelectedIndex() == 1) {//boom game
                    switch (choice) {
                        case 1://way
                            unitId = WAY;
                            break;
                        case 2://wall
                            unitId = WALL;
                            break;
                        case 3://tree
                            unitId = BOX;
                            break;
                        case 4://other
                            unitId = OTHER;
                            break;
                        default:
                            //(5 - > 29) + 64
                            unitId = choice + 64;//item
                            break;
                    }
                    drawUnit(gImg, 0, 0, unitId);
                }
            }
        }
    }//GEN-LAST:event_cbbUnitItemStateChanged

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        StringBuilder sb = new StringBuilder();
        if(cbbListGame.getSelectedIndex() == 1){
            String pathFile = "boomMap.txt";
            String content = CommonMethod.getContentFile(pathFile);
            if(content.length() > 0){
                sb.append(content);
                sb.append(CommonDefine.BREAK_LINE);
            }
            for(int i = 0; i < 20; i ++){
                for(int j = 0; j < 20; j++){
                    if(i == 0 || i == 19 || j == 0 || j == 19){
                        if(map[i][j] != WALL && map[i][j] != OTHER){
                            JOptionPane.showMessageDialog(this, "This map is invalid! Cannot save!");
                            return;
                        }
                    }
                    sb.append(map[i][j]);
                    if(map[i][j] < 10){
                        sb.append(CommonDefine.SPACE);
                    }
                    if(j != 19){
                        sb.append(CommonDefine.COMMA);
                    }else if(j == 19){
                        sb.append(CommonDefine.SEPARATOR_GROUP);
                        sb.append(CommonDefine.BREAK_LINE);
                    }
                }
            }
            String sepa = "------------------------------------------------------------";
            sb.append(sepa);
            if(!CommonMethod.createFileWithContent(pathFile, sb.toString())){
                JOptionPane.showMessageDialog(this, "Cannot save this map.");
                return;
            }
            JOptionPane.showMessageDialog(this, "This Map has been saved!");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void drawMainGame(Graphics g) {
        g.setColor(BACKGROUND);
        g.fillRect(0, 0, MAP_SIZE, MAP_SIZE);
        if (map == null) {
            return;
        }
        int len = map.length;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len; j++) {
                drawUnit(g, i, j, map[i][j]);
            }
        }
    }

    private void drawMainGame() {
        g.setColor(BACKGROUND);
        g.fillRect(0, 0, MAP_SIZE, MAP_SIZE);
        if (map == null) {
            return;
        }
        int len = map.length;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len; j++) {
                drawUnit(g, i, j, map[i][j]);
            }
        }
    }

    private void drawUnit(Graphics g, int i, int j, int val) {
        switch (val) {
            case WAY:
                drawWayStart(g, i, j);
                break;

            case WALL:
                drawWallStart(g, i, j);
                break;

            case BOX:
                drawBoxStart(g, i, j);
                break;

            case OTHER:
                drawOther(g, i, j, val);
                break;
            case ITEM_RECOVERY_1:
            case ITEM_SUPER_KICK:
            case ITEM_SUPER_EAT:
            case ITEM_NINJA:
            case ITEM_PROTECTED:
            case ITEM_6:
            case ITEM_7:
            case ITEM_8:
            case ITEM_9:
            case ITEM_10:
            case ITEM_11:
            case ITEM_12:
            case ITEM_13:
            case ITEM_14:
            case ITEM_15:
            case ITEM_16:
            case ITEM_17:
            case ITEM_18:
            case ITEM_19:
            case ITEM_RECOVERY_2:
            case ITEM_RECOVERY_3:
            case ITEM_MONEY_BAG:
            case ITEM_BAG_PLUS:
            case ITEM_BIG_BAG_PLUS:
            case ITEM_BOMB_DIRECTION:
                drawItem(g, i, j, val);
                break;
            default:
                break;
        }
    }

    private void drawWayStart(Graphics g, int x, int y) {
        g.setColor(BACKGROUND);
        g.fillRect(y * SIZE, x * SIZE, SIZE, SIZE);
        g.drawImage(mapImg.get("way"), y * SIZE, x * SIZE, SIZE, SIZE, null);
    }

    private void drawWallStart(Graphics g, int x, int y) {
        drawWayStart(g, x, y);
        g.drawImage(mapImg.get("wall"), y * SIZE, x * SIZE, SIZE, SIZE, null);
    }

    private void drawBoxStart(Graphics g, int x, int y) {
        drawWayStart(g, x, y);
        g.drawImage(mapImg.get("box"), y * SIZE, x * SIZE, SIZE, SIZE, null);
    }

    private void drawItem(Graphics g, int x, int y, int val) {
        drawWayStart(g, x, y);
        if (BoomGameClient.isBombItem(val)) {
            int b_scale = 10;
            int ef_scale = 6;
            g.drawImage(mapImg.get("bomb_" + BoomGameClient.getBombItem(val)), y * SIZE + b_scale, x * SIZE + b_scale, SIZE - 2 * b_scale, SIZE - 2 * b_scale, null);
            g.drawImage(mapImg.get("item_bm_ef"), y * SIZE + ef_scale, x * SIZE + ef_scale, SIZE - 2 * ef_scale, SIZE - 2 * ef_scale, null);
        } else {
            int it_scale = 6;
            int ef_scale = 10;
            g.drawImage(mapImg.get("item_" + val), y * SIZE + it_scale, x * SIZE + it_scale, SIZE - 2 * it_scale, SIZE - 2 * it_scale, null);
            g.drawImage(mapImg.get("item_it"), y * SIZE + ef_scale, x * SIZE, SIZE - ef_scale, SIZE - ef_scale, null);
        }

    }

    private void drawOther(Graphics g, int x, int y, int val) {
        if (g.equals(gImg)) {
            new Thread(() -> {
                while (cbbUnit.getSelectedIndex() == 4) {
                    try {
                        int v = (int) (Math.random() * OTHER_COUNT + 1);
                        if (v > OTHER_COUNT) {
                            v = OTHER_COUNT;
                        }
                        Image img = mapImg.get("other_" + v);
                        int img_width = img.getWidth(null);
                        int img_height = img.getHeight(null);
                        int sw, sh;
                        if (img_width > img_height) {
                            sw = SIZE;
                            sh = (sw * img_height) / img_width;
                        } else {
                            sh = SIZE;
                            sw = (sh * img_width) / img_height;
                        }
                        drawWayStart(g, x, y);
                        g.drawImage(img, y * SIZE + (SIZE - sw) / 2, x * SIZE + (SIZE - sh) / 2, sw, sh, null);
                        Thread.sleep(600);
                    } catch (InterruptedException ex) {
                    }
                }
            }).start();
        } else {
            int v = (x + y + val) % (OTHER_COUNT) + 1;
            Image img = mapImg.get("other_" + v);
            int img_width = img.getWidth(null);
            int img_height = img.getHeight(null);
            int sw, sh;
            if (img_width > img_height) {
                sw = SIZE;
                sh = (sw * img_height) / img_width;
            } else {
                sh = SIZE;
                sw = (sh * img_width) / img_height;
            }
            drawWayStart(g, x, y);
            g.drawImage(img, y * SIZE + (SIZE - sw) / 2, x * SIZE + (SIZE - sh) / 2, sw, sh, null);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbbListGame;
    private javax.swing.JComboBox<String> cbbUnit;
    private javax.swing.JLabel lb_title;
    private javax.swing.JPanel main_panel;
    private javax.swing.JPanel pn_Img;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
